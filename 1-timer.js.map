{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nlet userSelectedDate;\nconst datetimePicker = document.querySelector(\"#datetime-picker\");\nconst startButton = document.querySelector(\"button[data-start]\");\nstartButton.disabled = true;\nconst dataDays = document.querySelector(\"[data-days]\");\nconst dataHours = document.querySelector(\"[data-hours]\");\nconst dataMinutes = document.querySelector(\"[data-minutes]\");\nconst dataSeconds = document.querySelector(\"[data-seconds]\");\n\nstartButton.addEventListener(\"click\", startTimer);\n\nfunction startTimer() {\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n  const intervalId = setInterval(() => {\n    const timeLeft = userSelectedDate - Date.now();\n    if (timeLeft <= 0) {\n      clearInterval(intervalId);\n      datetimePicker.disabled = false;\n      return;\n    }\n    const { days, hours, minutes, seconds } = convertMs(timeLeft);\n    dataDays.textContent = String(days).padStart(2, \"0\");\n    dataHours.textContent = String(hours).padStart(2, \"0\");\n    dataMinutes.textContent = String(minutes).padStart(2, \"0\");\n    dataSeconds.textContent = String(seconds).padStart(2, \"0\");\n  }, 1000);\n}\n\nflatpickr(\"#datetime-picker\", {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < Date.now()) {\n      iziToast.error({\n        title: \"Error\",\n        titleColor: \"#FFFFFF\",\n        message: \"Please choose a date in the future\",\n        messageColor: \"#FFFFFF\",\n        backgroundColor: \"#EF4040\",\n        iconUrl: \"../img/octagon.svg\",\n        position: \"topRight\",\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["userSelectedDate","datetimePicker","startButton","dataDays","dataHours","dataMinutes","dataSeconds","startTimer","intervalId","timeLeft","days","hours","minutes","seconds","convertMs","flatpickr","selectedDates","iziToast","ms"],"mappings":"+IAKA,IAAIA,EACJ,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,oBAAoB,EAC/DA,EAAY,SAAW,GACvB,MAAMC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAY,iBAAiB,QAASK,CAAU,EAEhD,SAASA,GAAa,CACpBL,EAAY,SAAW,GACvBD,EAAe,SAAW,GAC1B,MAAMO,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAWT,EAAmB,KAAK,IAAG,EAC5C,GAAIS,GAAY,EAAG,CACjB,cAAcD,CAAU,EACxBP,EAAe,SAAW,GAC1B,MACD,CACD,KAAM,CAAE,KAAAS,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAQ,EAC5DN,EAAS,YAAc,OAAOO,CAAI,EAAE,SAAS,EAAG,GAAG,EACnDN,EAAU,YAAc,OAAOO,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDN,EAAY,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDN,EAAY,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,CAC1D,EAAE,GAAI,CACT,CAEAE,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBhB,EAAmBgB,EAAc,CAAC,EAC9BhB,EAAmB,KAAK,OAC1BiB,EAAS,MAAM,CACb,MAAO,QACP,WAAY,UACZ,QAAS,qCACT,aAAc,UACd,gBAAiB,UACjB,QAAS,qBACT,SAAU,UAClB,CAAO,EACDf,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAED,SAASY,EAAUI,EAAI,CAMrB,MAAMR,EAAO,KAAK,MAAMQ,EAAK,KAAG,EAC1BP,EAAQ,KAAK,MAAOO,EAAK,MAAO,IAAI,EACpCN,EAAU,KAAK,MAAQM,EAAK,MAAO,KAAQ,GAAM,EACjDL,EAAU,KAAK,MAASK,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}